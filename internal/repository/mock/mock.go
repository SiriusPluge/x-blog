// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repositoryshell.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "X-Blog/pkg/models"
	reflect "reflect"

	exterr "github.com/alexmolinanasaev/exterr"
	gomock "github.com/golang/mock/gomock"
)

// MockBlogApp is a mock of BlogApp interface.
type MockBlogApp struct {
	ctrl     *gomock.Controller
	recorder *MockBlogAppMockRecorder
}

// MockBlogAppMockRecorder is the mock recorder for MockBlogApp.
type MockBlogAppMockRecorder struct {
	mock *MockBlogApp
}

// NewMockBlogApp creates a new mock instance.
func NewMockBlogApp(ctrl *gomock.Controller) *MockBlogApp {
	mock := &MockBlogApp{ctrl: ctrl}
	mock.recorder = &MockBlogAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogApp) EXPECT() *MockBlogAppMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockBlogApp) CreatePost(arg0 *models.Post) (int, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockBlogAppMockRecorder) CreatePost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockBlogApp)(nil).CreatePost), arg0)
}

// DeletePost mocks base method.
func (m *MockBlogApp) DeletePost(id int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", id)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockBlogAppMockRecorder) DeletePost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockBlogApp)(nil).DeletePost), id)
}

// DeleteUser mocks base method.
func (m *MockBlogApp) DeleteUser(id int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockBlogAppMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockBlogApp)(nil).DeleteUser), id)
}

// FavoritesPost mocks base method.
func (m *MockBlogApp) FavoritesPost(userID, postID, amountFavorites int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavoritesPost", userID, postID, amountFavorites)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// FavoritesPost indicates an expected call of FavoritesPost.
func (mr *MockBlogAppMockRecorder) FavoritesPost(userID, postID, amountFavorites interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoritesPost", reflect.TypeOf((*MockBlogApp)(nil).FavoritesPost), userID, postID, amountFavorites)
}

// GetAmountFavoritesPost mocks base method.
func (m *MockBlogApp) GetAmountFavoritesPost(postID int) (int, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmountFavoritesPost", postID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// GetAmountFavoritesPost indicates an expected call of GetAmountFavoritesPost.
func (mr *MockBlogAppMockRecorder) GetAmountFavoritesPost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmountFavoritesPost", reflect.TypeOf((*MockBlogApp)(nil).GetAmountFavoritesPost), postID)
}

// GetAmountLikePost mocks base method.
func (m *MockBlogApp) GetAmountLikePost(postID int) (int, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmountLikePost", postID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// GetAmountLikePost indicates an expected call of GetAmountLikePost.
func (mr *MockBlogAppMockRecorder) GetAmountLikePost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmountLikePost", reflect.TypeOf((*MockBlogApp)(nil).GetAmountLikePost), postID)
}

// GetCheckFavoritesPost mocks base method.
func (m *MockBlogApp) GetCheckFavoritesPost(userID, postID int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckFavoritesPost", userID, postID)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// GetCheckFavoritesPost indicates an expected call of GetCheckFavoritesPost.
func (mr *MockBlogAppMockRecorder) GetCheckFavoritesPost(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckFavoritesPost", reflect.TypeOf((*MockBlogApp)(nil).GetCheckFavoritesPost), userID, postID)
}

// GetCheckLikePost mocks base method.
func (m *MockBlogApp) GetCheckLikePost(userID, postID int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckLikePost", userID, postID)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// GetCheckLikePost indicates an expected call of GetCheckLikePost.
func (mr *MockBlogAppMockRecorder) GetCheckLikePost(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckLikePost", reflect.TypeOf((*MockBlogApp)(nil).GetCheckLikePost), userID, postID)
}

// GetPost mocks base method.
func (m *MockBlogApp) GetPost(id int) (*models.Post, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", id)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockBlogAppMockRecorder) GetPost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockBlogApp)(nil).GetPost), id)
}

// GetPostAuthorID mocks base method.
func (m *MockBlogApp) GetPostAuthorID(id int) (int, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostAuthorID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// GetPostAuthorID indicates an expected call of GetPostAuthorID.
func (mr *MockBlogAppMockRecorder) GetPostAuthorID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostAuthorID", reflect.TypeOf((*MockBlogApp)(nil).GetPostAuthorID), id)
}

// GetUserByEmail mocks base method.
func (m *MockBlogApp) GetUserByEmail(email string) (*models.User, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockBlogAppMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockBlogApp)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockBlogApp) GetUserByID(id int) (*models.User, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockBlogAppMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockBlogApp)(nil).GetUserByID), id)
}

// LikePost mocks base method.
func (m *MockBlogApp) LikePost(userID, postID, amountLikes int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", userID, postID, amountLikes)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// LikePost indicates an expected call of LikePost.
func (mr *MockBlogAppMockRecorder) LikePost(userID, postID, amountLikes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockBlogApp)(nil).LikePost), userID, postID, amountLikes)
}

// SignUp mocks base method.
func (m *MockBlogApp) SignUp(user *models.User) (int, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockBlogAppMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockBlogApp)(nil).SignUp), user)
}

// UnfavoritesPost mocks base method.
func (m *MockBlogApp) UnfavoritesPost(userID, postID, amountFavorites int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfavoritesPost", userID, postID, amountFavorites)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// UnfavoritesPost indicates an expected call of UnfavoritesPost.
func (mr *MockBlogAppMockRecorder) UnfavoritesPost(userID, postID, amountFavorites interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfavoritesPost", reflect.TypeOf((*MockBlogApp)(nil).UnfavoritesPost), userID, postID, amountFavorites)
}

// UnlikePost mocks base method.
func (m *MockBlogApp) UnlikePost(userID, postID, amountLikes int) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePost", userID, postID, amountLikes)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockBlogAppMockRecorder) UnlikePost(userID, postID, amountLikes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockBlogApp)(nil).UnlikePost), userID, postID, amountLikes)
}

// UpdatePost mocks base method.
func (m *MockBlogApp) UpdatePost(post *models.Post) exterr.ErrExtender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", post)
	ret0, _ := ret[0].(exterr.ErrExtender)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockBlogAppMockRecorder) UpdatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockBlogApp)(nil).UpdatePost), post)
}

// UserPage mocks base method.
func (m *MockBlogApp) UserPage(id int) (*models.User, exterr.ErrExtender) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPage", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(exterr.ErrExtender)
	return ret0, ret1
}

// UserPage indicates an expected call of UserPage.
func (mr *MockBlogAppMockRecorder) UserPage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPage", reflect.TypeOf((*MockBlogApp)(nil).UserPage), id)
}
